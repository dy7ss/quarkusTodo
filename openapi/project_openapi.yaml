# TODO:あとで実装と同期させる
openapi: 3.0.0
info:
  title: Project API
  description: This API allows you to manage user's project data.
  version: 1.0.0
tags:
  - name: projects
    description: Operations about projects
  - name: tasks
    description: Operations about tasks
servers:
  - url: https://api.example.com/v1
paths:
  /users/{userId}/projects:
    get:
      tags:
        - projects
      summary: Get user's pet by user ID and pet ID
      operationId: getList
      parameters:
        - name: userId
          in: path
          description: The ID of the user to retrieve projects for
          required: true
          schema:
            $ref: "#/components/schemas/UserId"
      responses:
        "200":
          $ref: "#/components/responses/ProjectsResponse"
    post:
      tags:
        - projects
      summary: Create a new project
      operationId: create
      parameters:
        - name: userId
          in: path
          description: The ID of the user to create a project for
          required: true
          schema:
            $ref: "#/components/schemas/UserId"
      requestBody:
        $ref: "#/components/requestBodies/ProjectPostReqBody"
      responses:
        "201":
          description: No Content

  /users/{userId}/projects/{projectId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: The ID of the user to delete or update a project for
        schema:
          $ref: "#/components/schemas/UserId"
      - name: projectId
        in: path
        required: true
        description: The ID of the project
        schema:
          $ref: "#/components/schemas/projectId"
    delete:
      tags:
        - projects
      summary: Delete a project
      operationId: delete
      responses:
        "204":
          description: No Content
    put:
      tags:
        - projects
      summary: Update a project
      operationId: update
      requestBody:
        description: Project object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "204":
          description: No Content

  /users/{userId}/projects/{projectId}/tasks:
    get:
      tags:
        - tasks
      summary: Get a list of tasks by project ID
      operationId: getTasks
      parameters:
        - name: userId
          in: path
          description: The ID of the user to retrieve tasks for
          required: true
          schema:
            $ref: "#/components/schemas/UserId"
        - name: projectId
          in: path
          description: The ID of the project to retrieve tasks for
          required: true
          schema:
            $ref: "#/components/schemas/projectId"
      responses:
        "200":
          $ref: "#/components/responses/Tasks"
    post:
      tags:
        - tasks
      summary: Create a new task
      operationId: createTask
      parameters:
        - name: userId
          in: path
          description: The ID of the user to create a task for
          required: true
          schema:
            $ref: "#/components/schemas/UserId"
        - name: projectId
          in: path
          description: The ID of the project to create a task for
          required: true
          schema:
            $ref: "#/components/schemas/projectId"
      requestBody:
        description: Task object that needs to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "201":
          description: No Content

  /users/{userId}/projects/{projectId}/tasks/{taskId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: The ID of the user to retrieve or update a task for
        schema:
          $ref: "#/components/schemas/UserId"
      - name: projectId
        in: path
        required: true
        description: The ID of the project
        schema:
          $ref: "#/components/schemas/projectId"
      - name: taskId
        in: path
        required: true
        description: The ID of the task
        schema:
          type: integer
          format: int64
    get:
      tags:
        - tasks
      summary: Get a task by task ID
      operationId: getTask
      responses:
        "200":
          description: A task object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
    put:
      tags:
        - tasks
      summary: Update a task
      operationId: updateTask
      requestBody:
        description: Task object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "204":
          description: No Content
    patch:
      tags:
        - tasks
      summary: update a task status
      operationId: updateTaskStatus
      requestBody:
        $ref: "#/components/requestBodies/ApprovalReqBody"
      responses:
        "204":
          description: No Content

components:
  requestBodies:
    ApprovalReqBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              taskStatus:
                $ref: "#/components/schemas/TaskStatus"
    ProjectPostReqBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Project"

  responses:
    ProjectsResponse:
      description: A list of projects
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Projects"

    Project:
      description: A project object
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Project"
    
    Tasks: 
      description: A list of tasks
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Tasks"

  schemas:
    Projects:
      type: array
      items:
        $ref: "#/components/schemas/Project"

    Project:
      type: object
      description: A project object
      properties:
        name:
          type: string
          description: The name of the project
        registeredDateTime:
          type: string
          format: date-time
          description: The date the project was registered
        updatedDateTime:
          type: string
          format: date-time
          description: The date the project was last updated

    projectId:
      type: integer
      format: int64
      description: The unique identifier for a project

    UserId:
      type: integer
      format: int64
      description: The unique identifier for a user

    Tasks:
      type: array
      items:
        $ref: "#/components/schemas/Task"

    Task:
      type: object
      description: A task object
      properties:
        taskId:
          type: integer
          format: int64
          description: The unique identifier for a task
        parentProjectId:
          type: integer
          format: int64
          description: The unique identifier for a project
        taskName:
          type: string
          description: The name of the task
        TaskStatus:
          $ref: "#/components/schemas/TaskStatus"

    TaskStatus:
      type: string
      description: The status of the task
      enum:
        - NOT_STARTED
        - IN_PROGRESS
        - COMPLETED
